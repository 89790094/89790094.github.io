<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一亩三分</title>
  
  <subtitle>累并努力着,生活本该如此</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://89790094.github.io/"/>
  <updated>2020-05-15T01:59:47.179Z</updated>
  <id>https://89790094.github.io/</id>
  
  <author>
    <name>@liudong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title> MacOS App icns 图标快速生成</title>
    <link href="https://89790094.github.io/2020/05/15/MacOS-App-icns-%E5%9B%BE%E6%A0%87%E5%BF%AB%E9%80%9F%E7%94%9F%E6%88%90/"/>
    <id>https://89790094.github.io/2020/05/15/MacOS-App-icns-图标快速生成/</id>
    <published>2020-05-15T01:54:22.000Z</published>
    <updated>2020-05-15T01:59:47.179Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>生成步骤</p></blockquote><ol><li>准备一个<code>1024 * 1024</code>的<code>png</code>,名字为<code>icon.png</code></li><li>创建图片存放的临时目录：<code>$ mkdir icon.iconset</code></li><li>转换</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ sips -z 16 16     icon.png --out icon.iconset/icon_16x16.png</span><br><span class="line">$ sips -z 32 32     icon.png --out icon.iconset/icon_16x16@2x.png</span><br><span class="line">$ sips -z 32 32     icon.png --out icon.iconset/icon_32x32.png</span><br><span class="line">$ sips -z 64 64     icon.png --out icon.iconset/icon_32x32@2x.png</span><br><span class="line">$ sips -z 128 128   icon.png --out icon.iconset/icon_128x128.png</span><br><span class="line">$ sips -z 256 256   icon.png --out icon.iconset/icon_128x128@2x.png</span><br><span class="line">$ sips -z 256 256   icon.png --out icon.iconset/icon_256x256.png</span><br><span class="line">$ sips -z 512 512   icon.png --out icon.iconset/icon_256x256@2x.png</span><br><span class="line">$ sips -z 512 512   icon.png --out icon.iconset/icon_512x512.png</span><br><span class="line">$ sips -z 1024 1024   icon.png --out icon.iconset/icon_512x512@2x.png</span><br></pre></td></tr></table></figure><a id="more"></a><ol start="4"><li>通过<code>iconutil</code>生成<code>icns</code>文件</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iconutil -c icns icon.iconset -o icon.icns</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;生成步骤&lt;/p&gt;
&lt;/blockquote&gt;&lt;ol&gt;
&lt;li&gt;准备一个&lt;code&gt;1024 * 1024&lt;/code&gt;的&lt;code&gt;png&lt;/code&gt;,名字为&lt;code&gt;icon.png&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;创建图片存放的临时目录：&lt;code&gt;$ mkdir icon.iconset&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;转换&lt;/li&gt;
&lt;/ol&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ sips -z 16 16     icon.png --out icon.iconset/icon_16x16.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sips -z 32 32     icon.png --out icon.iconset/icon_16x16@2x.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sips -z 32 32     icon.png --out icon.iconset/icon_32x32.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sips -z 64 64     icon.png --out icon.iconset/icon_32x32@2x.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sips -z 128 128   icon.png --out icon.iconset/icon_128x128.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sips -z 256 256   icon.png --out icon.iconset/icon_128x128@2x.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sips -z 256 256   icon.png --out icon.iconset/icon_256x256.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sips -z 512 512   icon.png --out icon.iconset/icon_256x256@2x.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sips -z 512 512   icon.png --out icon.iconset/icon_512x512.png&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ sips -z 1024 1024   icon.png --out icon.iconset/icon_512x512@2x.png&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Cordova" scheme="https://89790094.github.io/categories/Cordova/"/>
    
    
      <category term="MacOS" scheme="https://89790094.github.io/tags/MacOS/"/>
    
  </entry>
  
  <entry>
    <title>macOS Catulina 10.15.4下安装wine 64的方法（基于electron-packager打包win32程序）</title>
    <link href="https://89790094.github.io/2020/04/27/macOS-Catulina-10-15-4%E4%B8%8B%E5%AE%89%E8%A3%85wine-64%E7%9A%84%E6%96%B9%E6%B3%95%EF%BC%88%E5%9F%BA%E4%BA%8Eelectron-packager%E6%89%93%E5%8C%85win32%E7%A8%8B%E5%BA%8F%EF%BC%89/"/>
    <id>https://89790094.github.io/2020/04/27/macOS-Catulina-10-15-4下安装wine-64的方法（基于electron-packager打包win32程序）/</id>
    <published>2020-04-27T00:31:19.000Z</published>
    <updated>2020-05-06T07:03:28.350Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>安装</p></blockquote><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ brew cask install xquartz</span><br><span class="line">$ brew cask install wine-staging</span><br></pre></td></tr></table></figure><blockquote><p>electorn-package</p></blockquote><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 根据提示完成Mono/Gecko(.net框架)的安装</span></span><br><span class="line">$ electron-packager . LanguageNote --platform=win32 --arch=x64 --out=dist --icon=./assets/logo.ico --prune=<span class="literal">true</span> --asar</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>electorn-build</p></blockquote><ol><li>在MacOS上利用Docker打包windows安装程序</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"># 拉取容器并运行进入</span><br><span class="line">$ docker run --rm -ti \</span><br><span class="line"> --env-file &lt;(env | grep -iE &apos;DEBUG|NODE_|ELECTRON_|YARN_|NPM_|CI|CIRCLE|TRAVIS_TAG|TRAVIS|TRAVIS_REPO_|TRAVIS_BUILD_|TRAVIS_BRANCH|TRAVIS_PULL_REQUEST_|APPVEYOR_|CSC_|GH_|GITHUB_|BT_|AWS_|STRIP|BUILD_&apos;) \</span><br><span class="line"> --env ELECTRON_CACHE=&quot;/root/.cache/electron&quot; \</span><br><span class="line"> --env ELECTRON_BUILDER_CACHE=&quot;/root/.cache/electron-builder&quot; \</span><br><span class="line"> -v $&#123;PWD&#125;:/project \</span><br><span class="line"> -v $&#123;PWD##*/&#125;-node-modules:/project/node_modules \</span><br><span class="line"> -v ~/.cache/electron:/root/.cache/electron \</span><br><span class="line"> -v ~/.cache/electron-builder:/root/.cache/electron-builder \</span><br><span class="line"> electronuserland/builder:wine</span><br><span class="line"># package.json配置</span><br><span class="line">&quot;dist&quot;: &quot;electron-builder -w nsis&quot;</span><br><span class="line">&gt; yarn</span><br><span class="line"># 环境变量配置</span><br><span class="line">export CSC_NAME=&apos;*.p12&apos;</span><br><span class="line">export CSC_LINK=*.p12&apos;</span><br><span class="line">export CSC_KEY_PASSWORD=&apos;****&apos;</span><br><span class="line">export WIN_CSC_LINK=*.p12</span><br><span class="line">export WIN_CSC_KEY_PASSWORD=&apos;****&apos;</span><br><span class="line">&gt; yarn dist</span><br></pre></td></tr></table></figure><blockquote><p>electron-installer-windows</p></blockquote><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install mono</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;安装&lt;/p&gt;
&lt;/blockquote&gt;&lt;figure class=&quot;highlight zsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ brew cask install xquartz&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ brew cask install wine-staging&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;blockquote&gt;
&lt;p&gt;electorn-package&lt;/p&gt;
&lt;/blockquote&gt;&lt;figure class=&quot;highlight zsh&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 根据提示完成Mono/Gecko(.net框架)的安装&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ electron-packager . LanguageNote --platform=win32 --arch=x64 --out=dist --icon=./assets/logo.ico --prune=&lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; --asar&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="macOS" scheme="https://89790094.github.io/categories/macOS/"/>
    
    
      <category term="macOS" scheme="https://89790094.github.io/tags/macOS/"/>
    
      <category term="electorn" scheme="https://89790094.github.io/tags/electorn/"/>
    
  </entry>
  
  <entry>
    <title>macOS解决No receipt for com.apple.pkg.CLTools_Executables found at /的问题</title>
    <link href="https://89790094.github.io/2020/04/24/macOS%E8%A7%A3%E5%86%B3No-receipt-for-com-apple-pkg-CLTools-Executables-found-at-%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://89790094.github.io/2020/04/24/macOS解决No-receipt-for-com-apple-pkg-CLTools-Executables-found-at-的问题/</id>
    <published>2020-04-24T07:47:35.000Z</published>
    <updated>2020-04-27T00:33:08.244Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>解决方法</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># sudo</span></span><br><span class="line">$ sudo xcode-select -s /Applications/Xcode.app/Contents/Developer</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;解决方法&lt;/p&gt;
&lt;/blockquote&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span
      
    
    </summary>
    
    
      <category term="macOS" scheme="https://89790094.github.io/categories/macOS/"/>
    
    
      <category term="macOS" scheme="https://89790094.github.io/tags/macOS/"/>
    
  </entry>
  
  <entry>
    <title>pymongo连接mongodb副本集</title>
    <link href="https://89790094.github.io/2020/04/22/pymongo%E8%BF%9E%E6%8E%A5mongodb%E5%89%AF%E6%9C%AC%E9%9B%86/"/>
    <id>https://89790094.github.io/2020/04/22/pymongo连接mongodb副本集/</id>
    <published>2020-04-22T02:56:25.000Z</published>
    <updated>2020-04-22T03:04:46.136Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>思路</p></blockquote><ol><li>MongoClient</li><li>释放资源</li></ol><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> pymongo <span class="keyword">import</span> MongoClient</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Connection</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.connect = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__enter__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.connect = MongoClient(</span><br><span class="line">            <span class="string">'mongodb://root:sa@192.168.199.98:28017,192.168.199.99:28019/?replicaSet=rs0&amp;authSource=admin'</span>)</span><br><span class="line">        <span class="keyword">return</span> self.connect.get_database(<span class="string">'test'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__exit__</span><span class="params">(self, exc_type, exc_val, exc_tb)</span>:</span></span><br><span class="line">        self.connect.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">client</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        connection = MongoClient(</span><br><span class="line">            <span class="string">'mongodb://root:sa@192.168.199.98:28017,192.168.199.99:28019/?replicaSet=rs0&amp;authSource=admin'</span>)</span><br><span class="line">        <span class="keyword">return</span> connection.get_database(<span class="string">'test'</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">return</span> e</span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        connection.close()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="comment"># db = client()</span></span><br><span class="line">    <span class="keyword">with</span> Connection() <span class="keyword">as</span> db:</span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> db.test.find():</span><br><span class="line">            print(x)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;思路&lt;/p&gt;
&lt;/blockquote&gt;&lt;ol&gt;
&lt;li&gt;MongoClient&lt;/li&gt;
&lt;li&gt;释放资源&lt;/li&gt;
&lt;/ol&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
    
      <category term="python" scheme="https://89790094.github.io/categories/python/"/>
    
    
      <category term="pymongo" scheme="https://89790094.github.io/tags/pymongo/"/>
    
      <category term="mongodb" scheme="https://89790094.github.io/tags/mongodb/"/>
    
      <category term="replicaSet" scheme="https://89790094.github.io/tags/replicaSet/"/>
    
  </entry>
  
  <entry>
    <title>ElasticSearch6实现单字+词语查询</title>
    <link href="https://89790094.github.io/2020/04/13/ElasticSearch6%E5%AE%9E%E7%8E%B0%E5%8D%95%E5%AD%97-%E8%AF%8D%E8%AF%AD%E6%9F%A5%E8%AF%A2/"/>
    <id>https://89790094.github.io/2020/04/13/ElasticSearch6实现单字-词语查询/</id>
    <published>2020-04-13T03:25:43.000Z</published>
    <updated>2020-04-13T03:32:30.641Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>实现</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">// 定义存储结构</span><br><span class="line">put demo&#123;</span><br><span class="line">  &quot;settings&quot;: &#123;</span><br><span class="line">    &quot;number_of_shards&quot;: 1,</span><br><span class="line">    &quot;number_of_replicas&quot;: 0,</span><br><span class="line">    &quot;analysis&quot;: &#123;</span><br><span class="line">      &quot;tokenizer&quot;: &#123;</span><br><span class="line">          &quot;unigram_tokenizer&quot;: &#123;</span><br><span class="line">              &quot;type&quot;: &quot;ngram&quot;,</span><br><span class="line">              &quot;min_gram&quot;: 1,</span><br><span class="line">              &quot;max_gram&quot;: 1,</span><br><span class="line">              &quot;token_chars&quot;: [</span><br><span class="line">                  &quot;letter&quot;,</span><br><span class="line">                  &quot;digit&quot;</span><br><span class="line">              ]</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;analyzer&quot;: &#123;</span><br><span class="line">          &quot;unigram_analyzer&quot;: &#123;</span><br><span class="line">              &quot;tokenizer&quot;: &quot;unigram_tokenizer&quot;,</span><br><span class="line">              &quot;filter&quot;: [</span><br><span class="line">                  &quot;trim&quot;,</span><br><span class="line">                  &quot;asciifolding&quot;,</span><br><span class="line">                  &quot;cjk_width&quot;,</span><br><span class="line">                  &quot;lowercase&quot;</span><br><span class="line">              ]</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;mappings&quot;: &#123;</span><br><span class="line">    &quot;_doc&quot;:&#123;</span><br><span class="line">      &quot;properties&quot;:&#123;</span><br><span class="line">        &quot;title&quot;:&#123;</span><br><span class="line">          &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">            &quot;analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">            &quot;search_analyzer&quot;: &quot;ik_max_word&quot;,</span><br><span class="line">            &quot;fields&quot;: &#123;</span><br><span class="line">                &quot;key&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;keyword&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;word&quot;: &#123;</span><br><span class="line">                    &quot;type&quot;: &quot;text&quot;,</span><br><span class="line">                    &quot;analyzer&quot;: &quot;unigram_analyzer&quot;,</span><br><span class="line">                    &quot;search_analyzer&quot;: &quot;ik_max_word&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 查询语句</span><br><span class="line"></span><br><span class="line">GET demo/_doc/_search&#123;</span><br><span class="line">    query:&#123;</span><br><span class="line">        &#123;</span><br><span class="line">        multi_match: &#123;</span><br><span class="line">          query: keyword,</span><br><span class="line">          type: &apos;best_fields&apos;,</span><br><span class="line">          fields: [&apos;title^2&apos;, &apos;title.word&apos;],</span><br><span class="line">          operator: &apos;and&apos;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    sort:&#123;&apos;title.key&apos;:&apos;asc&apos;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;实现&lt;/p&gt;
&lt;/blockquote&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="ElasticSearch6" scheme="https://89790094.github.io/categories/ElasticSearch6/"/>
    
    
      <category term="ElasticSearch" scheme="https://89790094.github.io/tags/ElasticSearch/"/>
    
  </entry>
  
  <entry>
    <title>对象数组按另一个数组的索引值去排序</title>
    <link href="https://89790094.github.io/2020/04/13/%E5%AF%B9%E5%83%8F%E6%95%B0%E7%BB%84%E6%8C%89%E5%8F%A6%E4%B8%80%E4%B8%AA%E6%95%B0%E7%BB%84%E7%9A%84%E7%B4%A2%E5%BC%95%E5%80%BC%E5%8E%BB%E6%8E%92%E5%BA%8F/"/>
    <id>https://89790094.github.io/2020/04/13/对像数组按另一个数组的索引值去排序/</id>
    <published>2020-04-13T02:59:32.000Z</published>
    <updated>2020-04-13T03:20:10.459Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>思路</p></blockquote><ol><li>重构对象数组，附加排序字段</li><li>排序方法函数</li></ol><blockquote><p>实现Demo</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">let content = [</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;name&quot;: &quot;选自《汉乐府》&quot;,</span><br><span class="line">        &quot;ear&quot;: &quot;汉&quot;,</span><br><span class="line">        &quot;num&quot;: 3</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;name&quot;: &quot;选自《古诗十九首》&quot;,</span><br><span class="line">        &quot;ear&quot;: &quot;汉&quot;,</span><br><span class="line">        &quot;num&quot;: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;name&quot;: &quot;李贺&quot;,</span><br><span class="line">        &quot;ear&quot;: &quot;唐&quot;,</span><br><span class="line">        &quot;num&quot;: 1</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;name&quot;: &quot;刘禹锡&quot;,</span><br><span class="line">        &quot;ear&quot;: &quot;唐&quot;,</span><br><span class="line">        &quot;num&quot;: 2</span><br><span class="line">    &#125;,</span><br><span class="line">// 参照数组</span><br><span class="line">let ear = [&quot;先秦&quot;, &quot;汉&quot;, &quot;三国&quot;, &quot;魏晋&quot;, &quot;南北朝&quot;, &quot;唐&quot;, &quot;宋&quot;, &quot;元&quot;, &quot;明&quot;, &quot;清&quot;, &quot;近代&quot;]</span><br><span class="line">// 重构对象数组，附加排序字段</span><br><span class="line">return content.map(i=&gt;&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        name:i.name,</span><br><span class="line">        ear:i.ear,</span><br><span class="line">        num:i.num,</span><br><span class="line">        sort:ear.indexOf(i.ear)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).sort((a,b)=&gt;a.sort-b.sort).reduce((obj, i)=&gt;&#123;</span><br><span class="line">      obj[i.ear] = obj[i.ear] || []</span><br><span class="line">      obj[i.ear].push(i)</span><br><span class="line">      return obj</span><br><span class="line">    &#125;, &#123;&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;思路&lt;/p&gt;
&lt;/blockquote&gt;&lt;ol&gt;
&lt;li&gt;重构对象数组，附加排序字段&lt;/li&gt;
&lt;li&gt;排序方法函数&lt;/li&gt;
&lt;/ol&gt;&lt;blockquote&gt;
&lt;p&gt;实现Demo&lt;/p&gt;
&lt;/blockquote&gt;&lt;figure class=&quot;
      
    
    </summary>
    
    
      <category term="Node.js" scheme="https://89790094.github.io/categories/Node-js/"/>
    
    
      <category term="JavaScript" scheme="https://89790094.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Prisma 1.34.10 在mongodb中应用记录集</title>
    <link href="https://89790094.github.io/2020/03/24/Prisma-1-34-10-%E5%9C%A8mongodb%E4%B8%AD%E5%BA%94%E7%94%A8%E9%97%AE%E9%A2%98%E9%9B%86/"/>
    <id>https://89790094.github.io/2020/03/24/Prisma-1-34-10-在mongodb中应用问题集/</id>
    <published>2020-03-24T07:35:23.000Z</published>
    <updated>2020-03-25T07:51:50.060Z</updated>
    
    <content type="html"><![CDATA[<ol><li>schema类型为数组时只能添加不能查询，且playground docs查询中无此字段选项</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">path: [String!]!</span><br><span class="line"></span><br><span class="line">mutation(data:&#123;</span><br><span class="line">    path:&#123;</span><br><span class="line">        set:[&quot;str&quot;]</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)&#123;</span><br><span class="line">    path</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><ol start="2"><li>prisma以mongodb为数据源生成的playground docs查询中无OR方法</li><li>修改完docker-compose.yml文件后必须docker-compose up -d后容器才能加载修改过的文件</li><li></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;ol&gt;
&lt;li&gt;schema类型为数组时只能添加不能查询，且playground docs查询中无此字段选项&lt;/li&gt;
&lt;/ol&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;path: [String!]!&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mutation(data:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    path:&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        set:[&amp;quot;str&amp;quot;]&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    path&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://89790094.github.io/categories/Node-js/"/>
    
    
      <category term="Prisma" scheme="https://89790094.github.io/tags/Prisma/"/>
    
      <category term="Mongodb" scheme="https://89790094.github.io/tags/Mongodb/"/>
    
      <category term="Playground" scheme="https://89790094.github.io/tags/Playground/"/>
    
      <category term="GraphQL" scheme="https://89790094.github.io/tags/GraphQL/"/>
    
  </entry>
  
  <entry>
    <title>Python人性化的时间库arrow</title>
    <link href="https://89790094.github.io/2020/02/10/Python%E4%BA%BA%E6%80%A7%E5%8C%96%E7%9A%84%E6%97%B6%E9%97%B4%E5%BA%93arrow/"/>
    <id>https://89790094.github.io/2020/02/10/Python人性化的时间库arrow/</id>
    <published>2020-02-10T08:51:52.000Z</published>
    <updated>2020-02-10T09:06:08.761Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>內建的 time 用法</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">print(<span class="string">"时间："</span>, time.localtime(time.time()))</span><br><span class="line"></span><br><span class="line">print(<span class="string">'时间(基本格式化)：'</span>, time.asctime(time.localtime(time.time())))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 格式化成 2018-10-03 09:45:39形式</span></span><br><span class="line">print(<span class="string">'时间(格式化)：'</span>, time.strftime(<span class="string">"%Y-%m-%d %H:%M:%S"</span>, time.localtime()))</span><br><span class="line"></span><br><span class="line">s = <span class="string">"2018-10-03 09:45:39"</span></span><br><span class="line">print(<span class="string">'时间戳：'</span>, time.mktime(time.strptime(s, <span class="string">"%Y-%m-%d %H:%M:%S"</span>)))</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>arrow</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装</span></span><br><span class="line">pip install arrow</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用</span></span><br><span class="line"><span class="keyword">import</span> arrow</span><br><span class="line"><span class="comment"># 取得当下时间</span></span><br><span class="line">print(<span class="string">'现在时间'</span>, arrow.now())</span><br><span class="line">print(<span class="string">'UTC时间'</span>, arrow.utcnow())</span><br><span class="line"><span class="comment"># 时间形式转换</span></span><br><span class="line">print(<span class="string">'时间(格式化)：'</span>, arrow.now().format(<span class="string">"YYYY-MM-DD HH:mm:ss"</span>))</span><br><span class="line">print(<span class="string">'时间戳：'</span>, arrow.now().timestamp)</span><br><span class="line">print(<span class="string">'字串转时间：'</span>, arrow.get(<span class="string">"2018-10-03 09:45:55"</span>, <span class="string">"YYYY-MM-DD HH:mm:ss"</span>))</span><br><span class="line">print(<span class="string">'时间戳转时间：'</span>, arrow.get(<span class="string">"1538531139.0"</span>))</span><br><span class="line"><span class="comment"># 直接生成</span></span><br><span class="line">print(<span class="string">'直接生成：'</span>, arrow.Arrow(<span class="number">2018</span>, <span class="number">10</span>, <span class="number">3</span>))</span><br><span class="line"><span class="comment"># 时间推移</span></span><br><span class="line">t = arrow.now()</span><br><span class="line">print(<span class="string">'前一天：'</span>, t.shift(days=<span class="number">-1</span>))</span><br><span class="line">print(<span class="string">'前一周：'</span>, t.shift(weeks=<span class="number">-1</span>))</span><br><span class="line">print(<span class="string">'前一月：'</span>, t.shift(months=<span class="number">-1</span>))</span><br><span class="line">print(<span class="string">'前一年：'</span>, t.shift(years=<span class="number">-1</span>))</span><br><span class="line">print(<span class="string">'前一小時：'</span>, t.shift(hours=<span class="number">-1</span>))</span><br><span class="line">print(<span class="string">'人性化描述：'</span>, t.shift(hours=<span class="number">-1</span>).humanize(locale=<span class="string">'zh_tw'</span>))</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;內建的 time 用法&lt;/p&gt;
&lt;/blockquote&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; time&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&quot;时间：&quot;&lt;/span&gt;, time.localtime(time.time()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;时间(基本格式化)：&#39;&lt;/span&gt;, time.asctime(time.localtime(time.time())))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;# 格式化成 2018-10-03 09:45:39形式&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;时间(格式化)：&#39;&lt;/span&gt;, time.strftime(&lt;span class=&quot;string&quot;&gt;&quot;%Y-%m-%d %H:%M:%S&quot;&lt;/span&gt;, time.localtime()))&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;s = &lt;span class=&quot;string&quot;&gt;&quot;2018-10-03 09:45:39&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;print(&lt;span class=&quot;string&quot;&gt;&#39;时间戳：&#39;&lt;/span&gt;, time.mktime(time.strptime(s, &lt;span class=&quot;string&quot;&gt;&quot;%Y-%m-%d %H:%M:%S&quot;&lt;/span&gt;)))&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://89790094.github.io/categories/python/"/>
    
    
      <category term="时间库" scheme="https://89790094.github.io/tags/%E6%97%B6%E9%97%B4%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Set集合及其运算</title>
    <link href="https://89790094.github.io/2019/11/05/Set%E9%9B%86%E5%90%88%E5%8F%8A%E5%85%B6%E8%BF%90%E7%AE%97/"/>
    <id>https://89790094.github.io/2019/11/05/Set集合及其运算/</id>
    <published>2019-11-05T02:49:12.000Z</published>
    <updated>2019-11-05T02:53:20.766Z</updated>
    
    <content type="html"><![CDATA[<ul><li>交集</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A.intersection(B)</span><br><span class="line">A &amp; B</span><br></pre></td></tr></table></figure><ul><li>并集</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A.union(B)</span><br><span class="line">A | B</span><br></pre></td></tr></table></figure><ul><li>差集</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A.difference(B)</span><br></pre></td></tr></table></figure><ul><li>是否为另一个集合的子集</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A.issubset(B)</span><br></pre></td></tr></table></figure><ul><li>是否为另一个集合的父集</li></ul><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A.issuperset(B)</span><br></pre></td></tr></table></figure><ul><li>两个集合的对称差集</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A.symmetric_difference(B)</span><br></pre></td></tr></table></figure><ul><li>测试两个集合的交集，没有交集返回<code>True</code>；有交集返回<code>False</code></li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A.isdisjoint(B)</span><br></pre></td></tr></table></figure><ul><li>给集合添加一项元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A.add(B)</span><br></pre></td></tr></table></figure><ul><li>给集合添加多项元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A.update(B)</span><br></pre></td></tr></table></figure><ul><li>给集合删除一项元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A.remove(B)</span><br></pre></td></tr></table></figure><ul><li>删除集合中指定的一项元素</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">A.discard(&lt;val&gt;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;交集&lt;/li&gt;
&lt;/ul&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A.intersection(B)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A &amp;amp; B&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;并集&lt;/li&gt;
&lt;/ul&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A.union(B)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;A | B&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;差集&lt;/li&gt;
&lt;/ul&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A.difference(B)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;是否为另一个集合的子集&lt;/li&gt;
&lt;/ul&gt;&lt;figure class=&quot;highlight python&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;A.issubset(B)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;ul&gt;
&lt;li&gt;是否为另一个集合的父集&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://89790094.github.io/categories/python/"/>
    
    
      <category term="set" scheme="https://89790094.github.io/tags/set/"/>
    
  </entry>
  
  <entry>
    <title>Python中下划线的5种含义</title>
    <link href="https://89790094.github.io/2019/11/04/Python%E4%B8%AD%E4%B8%8B%E5%88%92%E7%BA%BF%E7%9A%845%E7%A7%8D%E5%90%AB%E4%B9%89/"/>
    <id>https://89790094.github.io/2019/11/04/Python中下划线的5种含义/</id>
    <published>2019-11-04T13:41:59.000Z</published>
    <updated>2019-11-04T13:43:24.547Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>单前导下划线 <code>_var</code></p></blockquote><ul><li>以单个下划线开头的变量或方法仅供内部使用,该约定在<code>PEP8</code>中有定义;</li><li>前导下划线的确会影响从模块中导入名称的方式（通配符导入）</li><li>单个下划线是一个<code>Python</code>命名约定，表示这个名称是供内部使用的。它通常不由<code>Python</code>解释器强制执行，仅仅作为一种对程序员的提示。</li></ul><a id="more"></a><blockquote><p>单末尾下划线<code>var_</code></p></blockquote><ul><li>单个末尾下划线（后缀）是一个约定，用来避免与<code>Python</code>关键字产生命名冲突，<code>PEP8</code>解释了这个约定</li></ul><blockquote><p>双前导下划线<code>__var</code></p></blockquote><ul><li>双下划线前缀会导致<code>Python</code>解释器重写属性名称，以避免子类中的命名冲突。</li><li>名称修饰<code>name mangling</code>解释器更改变量的名称，以便在类被扩展的时候不容易产生冲突。</li><li>双下划线<code>名称修饰</code>对程序员是完全透明</li></ul><blockquote><p>双前导和双末尾下划线<code>_var_</code></p></blockquote><ul><li>由双下划线前缀和后缀包围的变量不会被<code>Python</code>解释器修改</li><li><code>Python</code>保留了有双前导和双末尾下划线的名称，用于特殊用途。</li></ul><blockquote><p>单下划线<code>_</code></p></blockquote><ul><li>单个独立下划线是用作一个名字，来表示某个变量是临时的或无关紧要的</li><li>单个下划线用作“不关心的”变量</li><li>“_”是大多数Python REPL中的一个特殊变量，它表示由解释器评估的最近一个表达式的结果。</li><li>解构中的“_”作为占位符变量</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;单前导下划线 &lt;code&gt;_var&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;&lt;ul&gt;
&lt;li&gt;以单个下划线开头的变量或方法仅供内部使用,该约定在&lt;code&gt;PEP8&lt;/code&gt;中有定义;&lt;/li&gt;
&lt;li&gt;前导下划线的确会影响从模块中导入名称的方式（通配符导入）&lt;/li&gt;
&lt;li&gt;单个下划线是一个&lt;code&gt;Python&lt;/code&gt;命名约定，表示这个名称是供内部使用的。它通常不由&lt;code&gt;Python&lt;/code&gt;解释器强制执行，仅仅作为一种对程序员的提示。&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://89790094.github.io/categories/python/"/>
    
    
      <category term="下划线" scheme="https://89790094.github.io/tags/%E4%B8%8B%E5%88%92%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>堆队列算法：heapq</title>
    <link href="https://89790094.github.io/2019/11/04/%E5%A0%86%E9%98%9F%E5%88%97%E7%AE%97%E6%B3%95%EF%BC%9Aheapq/"/>
    <id>https://89790094.github.io/2019/11/04/堆队列算法：heapq/</id>
    <published>2019-11-04T13:38:33.000Z</published>
    <updated>2019-11-04T13:42:51.545Z</updated>
    
    <content type="html"><![CDATA[<h4 id="堆队列算法heapq"><a class="markdownIt-Anchor" href="#堆队列算法heapq"></a> 堆队列算法:heapq</h4><ul><li><code>import headq</code></li><li>要创建堆，请使用已初始化的列表<code>[]</code></li></ul><h5 id="方法"><a class="markdownIt-Anchor" href="#方法"></a> 方法</h5><ul><li><code>heapq.heappush(&lt;heap&gt;,&lt;item&gt;)</code> 将值项推送到堆上，保持堆不变</li><li><code>heapq.heappop(&lt;heap&gt;)</code> 弹出并返回堆中的最小项，保持堆不变，如果堆为空，<code>IndexError</code>则引发</li><li><code>heapq.heappushpop(&lt;heap&gt;,&lt;item&gt;)</code> 在堆上推送项目，然后弹出并返回堆中的最小项目</li><li><code>heapq.heapify(&lt;list)</code> 在线性时间内将列表转换为堆</li><li><code>heapq.heapreplace(&lt;heap&gt;,&lt;item&gt;)</code> 弹出并返回堆中的最小项，并同时推送新项，堆大小不会改变，如果堆为空，<code>IndexError</code>则引发,注意：返回的值可能大于添加的项目</li><li><code>heapq.merge（&lt;*iterables&gt;，key = None，reverse = False ）</code> 将多个已排序的输入合并为单个排序的输出</li><li><code>heapq.nlargest（n，iterable，key = None ）</code>  返回一个列表，其中包含iterable定义的数据集中的n个最大元素</li><li><code>heapq.nsmallest（n，iterable，key = None ）</code>  返回一个列表，其中包含iterable定义的数据集中的n个最小元素</li></ul><a id="more"></a><h5 id="demo"><a class="markdownIt-Anchor" href="#demo"></a> Demo</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">heapsort</span><span class="params">(iterable)</span>:</span></span><br><span class="line"><span class="meta">... </span>    h = []</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> value <span class="keyword">in</span> iterable:</span><br><span class="line"><span class="meta">... </span>        heappush(h, value)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> [heappop(h) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(h))]</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heapsort([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>])</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><ul><li>堆元素可以是元组</li></ul><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>h = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(h, (<span class="number">5</span>, <span class="string">'write code'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(h, (<span class="number">7</span>, <span class="string">'release product'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(h, (<span class="number">1</span>, <span class="string">'write spec'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(h, (<span class="number">3</span>, <span class="string">'create tests'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heappop(h)</span><br><span class="line">(<span class="number">1</span>, <span class="string">'write spec'</span>)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;堆队列算法heapq&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#堆队列算法heapq&quot;&gt;&lt;/a&gt; 堆队列算法:heapq&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;import headq&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;要创建堆，请使用已初始化的列表&lt;code&gt;[]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;h5 id=&quot;方法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#方法&quot;&gt;&lt;/a&gt; 方法&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;heapq.heappush(&amp;lt;heap&amp;gt;,&amp;lt;item&amp;gt;)&lt;/code&gt; 将值项推送到堆上，保持堆不变&lt;/li&gt;
&lt;li&gt;&lt;code&gt;heapq.heappop(&amp;lt;heap&amp;gt;)&lt;/code&gt; 弹出并返回堆中的最小项，保持堆不变，如果堆为空，&lt;code&gt;IndexError&lt;/code&gt;则引发&lt;/li&gt;
&lt;li&gt;&lt;code&gt;heapq.heappushpop(&amp;lt;heap&amp;gt;,&amp;lt;item&amp;gt;)&lt;/code&gt; 在堆上推送项目，然后弹出并返回堆中的最小项目&lt;/li&gt;
&lt;li&gt;&lt;code&gt;heapq.heapify(&amp;lt;list)&lt;/code&gt; 在线性时间内将列表转换为堆&lt;/li&gt;
&lt;li&gt;&lt;code&gt;heapq.heapreplace(&amp;lt;heap&amp;gt;,&amp;lt;item&amp;gt;)&lt;/code&gt; 弹出并返回堆中的最小项，并同时推送新项，堆大小不会改变，如果堆为空，&lt;code&gt;IndexError&lt;/code&gt;则引发,注意：返回的值可能大于添加的项目&lt;/li&gt;
&lt;li&gt;&lt;code&gt;heapq.merge（&amp;lt;*iterables&amp;gt;，key = None，reverse = False ）&lt;/code&gt; 将多个已排序的输入合并为单个排序的输出&lt;/li&gt;
&lt;li&gt;&lt;code&gt;heapq.nlargest（n，iterable，key = None ）&lt;/code&gt;  返回一个列表，其中包含iterable定义的数据集中的n个最大元素&lt;/li&gt;
&lt;li&gt;&lt;code&gt;heapq.nsmallest（n，iterable，key = None ）&lt;/code&gt;  返回一个列表，其中包含iterable定义的数据集中的n个最小元素&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="python" scheme="https://89790094.github.io/categories/python/"/>
    
    
      <category term="双向队列" scheme="https://89790094.github.io/tags/%E5%8F%8C%E5%90%91%E9%98%9F%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>Redis5手记</title>
    <link href="https://89790094.github.io/2019/11/04/Redis5%E6%89%8B%E8%AE%B0/"/>
    <id>https://89790094.github.io/2019/11/04/Redis5手记/</id>
    <published>2019-11-04T13:33:21.000Z</published>
    <updated>2019-11-04T13:39:38.012Z</updated>
    
    <content type="html"><![CDATA[<h4 id="新特性"><a class="markdownIt-Anchor" href="#新特性"></a> 新特性</h4><ol><li>新的<code>Stream</code>数据类型</li></ol><ul><li>本质：抽象日志</li><li>时间数据流</li></ul><ol start="2"><li>模块API：<code>Timers and Cluster API</code></li><li><code>RDB</code>现在存储<code>LFU</code>和<code>LRU</code>信息</li><li>集群管理器从<code>Ruby</code>移植到<code>C</code>代码</li><li><code>sorted set</code>命令：<code>ZPOPMIN</code>、<code>ZPOPMAX</code>和阻塞变种</li><li>主动碎片整理，<code>Jemalloc</code>:内存分配器</li><li>增强<code>HyperLogLog</code>实现</li><li>内存统计报告</li><li>子命令都有一个<code>help</code>子命令</li></ol><a id="more"></a><h4 id="命令行"><a class="markdownIt-Anchor" href="#命令行"></a> 命令行</h4><ol><li>基本命令</li></ol><ul><li><code>redis-server /etc/redis/redis.conf</code> 启动</li><li><code>redis-cli shutdown</code></li><li><code>flushall</code> 清空<code>redis</code></li><li><code>redis-cli -c -h &lt;IP&gt; -p &lt;Port&gt;</code> # <code>-c</code>以集群的方式连接</li><li><code>cluster info</code> 查看集群信息</li><li><code>cluster nodes</code> 查看集群节点</li><li><code>debug populate &lt;Number&gt; &lt;key&gt; &lt;value&gt;</code> 产生N条测试数据</li><li><code>info memory</code> 内存使用情况</li><li><code>memory usage &lt;key&gt;</code> 键值所占内存</li><li></li></ul><h4 id="配置项redisconf"><a class="markdownIt-Anchor" href="#配置项redisconf"></a> 配置项<code>redis.conf</code></h4><ol><li>运行</li></ol><ul><li><code>daemonize no/yes</code> 后台守护进程</li><li><code>protected-mode no/yes</code> 增强安全</li><li><code>pidfile /var/run/redis_6379.pid</code> 以守护进程运行时的pid文件</li><li><code>logfile &quot;/log_path&quot;</code> 日志文件</li></ul><ol start="2"><li><code>RDB</code> 持久化</li></ol><ul><li><code>dbfilename dump.db</code> 、<code>dir ./</code>: <code>RDB</code>持久化的文件名称及存放位置</li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">save 900 1 <span class="comment"># 900秒内1个key发生变化</span></span><br><span class="line">save 300 10 <span class="comment"># 300秒内10个key发生变化</span></span><br><span class="line">save 60 10000 <span class="comment"># 60秒内10000个key发生变化</span></span><br></pre></td></tr></table></figure><ol start="3"><li><code>AOF</code> 持久化（重启时优先读取）</li></ol><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">appendfsync always <span class="comment"># 只要key发生就会发持久化</span></span><br><span class="line">appendfsnc everysec <span class="comment"># 每秒持久化一次</span></span><br><span class="line">appendfsync no <span class="comment"># 不存储</span></span><br></pre></td></tr></table></figure><ul><li><code>oppendonly yes/no</code></li><li><code>appendfilename &quot;appendonly.aof&quot;</code>、<code>dir ./</code></li></ul><ol start="4"><li><code>cluster</code> 集群</li></ol><ul><li><code>cluster-enabled yes/no</code> 集群开关</li><li><code>cluster-config-file nodes-6379.conf</code> 集群配置文件（系统自动维护，记录节点、状态、持久化参数等）</li><li><code>cluster-node-timeout 15000</code> 主节点试连的最大时间，如果超过此时间则副节点会自动升升级为主节点</li></ul><h4 id="stream数据类型"><a class="markdownIt-Anchor" href="#stream数据类型"></a> <code>stream</code>数据类型</h4><ul><li>数据流向：从左向右，<code>消费组</code>进行读取</li><li>创建<code>stream</code></li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XADD &lt;key&gt; &lt;ID&gt; field string[field string]</span><br></pre></td></tr></table></figure><ul><li>ID:毫秒的<code>unix</code>时间戳-<code>sequence</code>（同一毫秒的序列号）组成</li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建demo</span></span><br><span class="line">XADD flag * key value <span class="comment">#ID默认时返回值为：时间戳+序列号（从0开始）</span></span><br><span class="line">XADD flag 0-1 key value <span class="comment">#ID自定义时返回值为自定义的ID</span></span><br></pre></td></tr></table></figure><ul><li>返回<code>stream</code>中元素的个数</li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XLEN &lt;key&gt;</span><br></pre></td></tr></table></figure><ul><li>删除一个ID</li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XDEL &lt;key&gt; ID</span><br></pre></td></tr></table></figure><ul><li>从一个或多个<code>stream</code>读取数据</li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XREAD [COUNT &lt;count&gt;] [BLOCK &lt;milliseconds&gt;] STREAMS &lt;key&gt; &lt;ID&gt; <span class="comment"># BLOCK 0 永远阻塞、&lt;key&gt; $ 获取最新的数据</span></span><br></pre></td></tr></table></figure><ul><li>查看给定<code>ID</code>范围内的<code>stream</code>数据</li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XRNGE &lt;key&gt; &lt;start&gt; &lt;end&gt; [COUNT &lt;count&gt;] <span class="comment"># `+`最大ID、`-`最小ID</span></span><br></pre></td></tr></table></figure><ul><li><p>消费组</p><ul><li>创建消费组</li></ul></li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XGROUP CREATE &lt;key&gt; &lt;groupname&gt; &lt;ID&gt;</span><br></pre></td></tr></table></figure><ul><li>从消费组中读取数据</li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">XREADGROUP GROUP &lt;groupname&gt; [COUNT &lt;count&gt;] [BLOCK &lt;milliseconds&gt;] STREAMS &lt;key&gt; &lt;ID&gt; <span class="comment"># ID为`&gt;`读取最新消息、&lt;ID&gt;之后的数据</span></span><br></pre></td></tr></table></figure><h4 id="搭建集群"><a class="markdownIt-Anchor" href="#搭建集群"></a> 搭建集群</h4><h4 id="sorted-set命令"><a class="markdownIt-Anchor" href="#sorted-set命令"></a> <code>Sorted Set</code>命令</h4><ul><li><code>ZPOPMAX</code> 删除集合中分值最高的元素</li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZPOPMAX &lt;key&gt; [count]</span><br></pre></td></tr></table></figure><ul><li><code>ZPOPMIN</code> 删除集合分值最低的元素</li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ZPOPMIN &lt;key&gt; [count]</span><br></pre></td></tr></table></figure><ul><li><code>BZPOPMAX</code> ZPOPMAX的阻塞版</li><li><code>BZPOPMIX</code> ZPOPMIN的阻塞版</li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BZPOPMAX &lt;key ...&gt; &lt;timeout&gt;</span><br></pre></td></tr></table></figure><h4 id="碎片整理和内存报告"><a class="markdownIt-Anchor" href="#碎片整理和内存报告"></a> 碎片整理和内存报告</h4><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># vi /etc/redis/redis.conf</span></span><br></pre></td></tr></table></figure><ul><li><code>activedefrag yes|no</code> 启动碎片整理程序</li><li><code>active-defrg-ignore-bytes 100mb</code> 当内存小于100m时可以忽略</li><li><code>active-defrg-threshold-lower 10</code> 当内存占比小于10%时可暂时忽略</li><li><code>info memory</code> 查看内存使用情况</li></ul><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; info memory</span><br><span class="line"></span><br><span class="line">used_memory_human:?m <span class="comment">#实际内存占用</span></span><br><span class="line">used_memory_rss_human:?m <span class="comment">#系统分配内存</span></span><br><span class="line">mem_fragmentation_ratio: ? <span class="comment">#内存使用率</span></span><br></pre></td></tr></table></figure><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; MEMORY STATS</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;新特性&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#新特性&quot;&gt;&lt;/a&gt; 新特性&lt;/h4&gt;&lt;ol&gt;
&lt;li&gt;新的&lt;code&gt;Stream&lt;/code&gt;数据类型&lt;/li&gt;
&lt;/ol&gt;&lt;ul&gt;
&lt;li&gt;本质：抽象日志&lt;/li&gt;
&lt;li&gt;时间数据流&lt;/li&gt;
&lt;/ul&gt;&lt;ol start=&quot;2&quot;&gt;
&lt;li&gt;模块API：&lt;code&gt;Timers and Cluster API&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;RDB&lt;/code&gt;现在存储&lt;code&gt;LFU&lt;/code&gt;和&lt;code&gt;LRU&lt;/code&gt;信息&lt;/li&gt;
&lt;li&gt;集群管理器从&lt;code&gt;Ruby&lt;/code&gt;移植到&lt;code&gt;C&lt;/code&gt;代码&lt;/li&gt;
&lt;li&gt;&lt;code&gt;sorted set&lt;/code&gt;命令：&lt;code&gt;ZPOPMIN&lt;/code&gt;、&lt;code&gt;ZPOPMAX&lt;/code&gt;和阻塞变种&lt;/li&gt;
&lt;li&gt;主动碎片整理，&lt;code&gt;Jemalloc&lt;/code&gt;:内存分配器&lt;/li&gt;
&lt;li&gt;增强&lt;code&gt;HyperLogLog&lt;/code&gt;实现&lt;/li&gt;
&lt;li&gt;内存统计报告&lt;/li&gt;
&lt;li&gt;子命令都有一个&lt;code&gt;help&lt;/code&gt;子命令&lt;/li&gt;
&lt;/ol&gt;
    
    </summary>
    
    
      <category term="redis" scheme="https://89790094.github.io/categories/redis/"/>
    
    
      <category term="redis" scheme="https://89790094.github.io/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>Pyenv Python installation steps to get the latest tcl/tk version on Mac OS 10.14.6 (Mojave)</title>
    <link href="https://89790094.github.io/2019/11/04/Pyenv-Python-installation-steps-to-get-the-latest-tcl-tk-version-on-Mac-OS-10-14-6-Mojave/"/>
    <id>https://89790094.github.io/2019/11/04/Pyenv-Python-installation-steps-to-get-the-latest-tcl-tk-version-on-Mac-OS-10-14-6-Mojave/</id>
    <published>2019-11-04T08:15:00.000Z</published>
    <updated>2019-11-05T03:32:37.043Z</updated>
    
    <content type="html"><![CDATA[<ol><li>install pyenv via homebrew</li></ol><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ brew install pyenv</span><br></pre></td></tr></table></figure><ol start="2"><li>install tcl-tk via home brew</li></ol><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ brew install tcl-tk</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> LDFLAGS=<span class="string">"-L/usr/local/opt/tcl-tk/lib"</span></span><br><span class="line"><span class="built_in">export</span> CPPFLAGS=<span class="string">"-I/usr/local/opt/tcl-tk/include"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/opt/tcl-tk/bin</span><br></pre></td></tr></table></figure><a id="more"></a><ol start="3"><li>to get tcl-tk 8.6 to work with the pyenv install of python, you must edit the python-build script file.</li></ol><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ vi ~/.pyenv/plugins/python-build/bin/python-build</span><br></pre></td></tr></table></figure><p>Once you have the script file open, search for:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$CONFIGURE_OPTS</span> <span class="string">$&#123;!PACKAGE_CONFIGURE_OPTS&#125;</span> <span class="string">"$&#123;!PACKAGE_CONFIGURE_OPTS_ARRAY&#125;"</span> <span class="string">||</span> <span class="string">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>and replace with:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">$CONFIGURE_OPTS</span> <span class="string">--with-tcltk-includes='-I/usr/local/opt/tcl-tk/include'</span> <span class="string">--with-tcltk-libs='-L/usr/local/opt/tcl-tk/lib</span> <span class="string">-ltcl8.6</span> <span class="string">-ltk8.6'</span> <span class="string">$&#123;!PACKAGE_CONFIGURE_OPTS&#125;</span> <span class="string">"$&#123;!PACKAGE_CONFIGURE_OPTS_ARRAY&#125;"</span> <span class="string">||</span> <span class="string">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><ol start="4"><li>install Python 3.8.0 in pyenv</li></ol><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$pyenv</span> install 3.8.0</span><br></pre></td></tr></table></figure><ol start="5"><li>Test your tcl-tk installation with</li></ol><figure class="highlight zsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$python</span> -m tkinter -c <span class="string">'tkinter._test()'</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      Pyenv install python3.8 steps to get the latest tcl/tk version on Mac OS
    
    </summary>
    
    
      <category term="python" scheme="https://89790094.github.io/categories/python/"/>
    
    
      <category term="pyenv" scheme="https://89790094.github.io/tags/pyenv/"/>
    
      <category term="tcl/tk" scheme="https://89790094.github.io/tags/tcl-tk/"/>
    
      <category term="python" scheme="https://89790094.github.io/tags/python/"/>
    
  </entry>
  
</feed>
