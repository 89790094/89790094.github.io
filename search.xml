<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Set集合及其运算</title>
    <url>/2019/11/05/Set%E9%9B%86%E5%90%88%E5%8F%8A%E5%85%B6%E8%BF%90%E7%AE%97/</url>
    <content><![CDATA[<ul>
<li>交集</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A.intersection(B)</span><br><span class="line">A &amp; B</span><br></pre></td></tr></table></figure>

<ul>
<li>并集</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A.union(B)</span><br><span class="line">A | B</span><br></pre></td></tr></table></figure>

<ul>
<li>差集</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A.difference(B)</span><br></pre></td></tr></table></figure>

<ul>
<li>是否为另一个集合的子集</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A.issubset(B)</span><br></pre></td></tr></table></figure>

<ul>
<li>是否为另一个集合的父集</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A.issuperset(B)</span><br></pre></td></tr></table></figure>

<ul>
<li>两个集合的对称差集</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A.symmetric_difference(B)</span><br></pre></td></tr></table></figure>

<ul>
<li>测试两个集合的交集，没有交集返回<code>True</code>；有交集返回<code>False</code></li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A.isdisjoint(B)</span><br></pre></td></tr></table></figure>

<ul>
<li>给集合添加一项元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A.add(B)</span><br></pre></td></tr></table></figure>

<ul>
<li>给集合添加多项元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A.update(B)</span><br></pre></td></tr></table></figure>

<ul>
<li>给集合删除一项元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A.remove(B)</span><br></pre></td></tr></table></figure>

<ul>
<li>删除集合中指定的一项元素</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">A.discard(&lt;val&gt;)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>set</tag>
      </tags>
  </entry>
  <entry>
    <title>Python中下划线的5种含义</title>
    <url>/2019/11/04/Python%E4%B8%AD%E4%B8%8B%E5%88%92%E7%BA%BF%E7%9A%845%E7%A7%8D%E5%90%AB%E4%B9%89/</url>
    <content><![CDATA[<blockquote>
<p>单前导下划线 <code>_var</code></p>
</blockquote>
<ul>
<li>以单个下划线开头的变量或方法仅供内部使用,该约定在<code>PEP8</code>中有定义;</li>
<li>前导下划线的确会影响从模块中导入名称的方式（通配符导入）</li>
<li>单个下划线是一个<code>Python</code>命名约定，表示这个名称是供内部使用的。它通常不由<code>Python</code>解释器强制执行，仅仅作为一种对程序员的提示。</li>
</ul>
<blockquote>
<p>单末尾下划线<code>var_</code></p>
</blockquote>
<ul>
<li>单个末尾下划线（后缀）是一个约定，用来避免与<code>Python</code>关键字产生命名冲突，<code>PEP8</code>解释了这个约定</li>
</ul>
<blockquote>
<p>双前导下划线<code>__var</code></p>
</blockquote>
<ul>
<li>双下划线前缀会导致<code>Python</code>解释器重写属性名称，以避免子类中的命名冲突。</li>
<li>名称修饰<code>name mangling</code>解释器更改变量的名称，以便在类被扩展的时候不容易产生冲突。</li>
<li>双下划线<code>名称修饰</code>对程序员是完全透明</li>
</ul>
<blockquote>
<p>双前导和双末尾下划线<code>_var_</code></p>
</blockquote>
<ul>
<li>由双下划线前缀和后缀包围的变量不会被<code>Python</code>解释器修改</li>
<li><code>Python</code>保留了有双前导和双末尾下划线的名称，用于特殊用途。</li>
</ul>
<blockquote>
<p>单下划线<code>_</code></p>
</blockquote>
<ul>
<li>单个独立下划线是用作一个名字，来表示某个变量是临时的或无关紧要的</li>
<li>单个下划线用作“不关心的”变量</li>
<li>“_”是大多数Python REPL中的一个特殊变量，它表示由解释器评估的最近一个表达式的结果。</li>
<li>解构中的“_”作为占位符变量</li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>下划线</tag>
      </tags>
  </entry>
  <entry>
    <title>堆队列算法：heapq</title>
    <url>/2019/11/04/%E5%A0%86%E9%98%9F%E5%88%97%E7%AE%97%E6%B3%95%EF%BC%9Aheapq/</url>
    <content><![CDATA[<h4 id="堆队列算法-heapq"><a href="#堆队列算法-heapq" class="headerlink" title="堆队列算法:heapq"></a>堆队列算法:heapq</h4><ul>
<li><code>import headq</code></li>
<li>要创建堆，请使用已初始化的列表<code>[]</code></li>
</ul>
<h5 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h5><ul>
<li><code>heapq.heappush(&lt;heap&gt;,&lt;item&gt;)</code> 将值项推送到堆上，保持堆不变</li>
<li><code>heapq.heappop(&lt;heap&gt;)</code> 弹出并返回堆中的最小项，保持堆不变，如果堆为空，<code>IndexError</code>则引发</li>
<li><code>heapq.heappushpop(&lt;heap&gt;,&lt;item&gt;)</code> 在堆上推送项目，然后弹出并返回堆中的最小项目</li>
<li><code>heapq.heapify(&lt;list)</code> 在线性时间内将列表转换为堆</li>
<li><code>heapq.heapreplace(&lt;heap&gt;,&lt;item&gt;)</code> 弹出并返回堆中的最小项，并同时推送新项，堆大小不会改变，如果堆为空，<code>IndexError</code>则引发,注意：返回的值可能大于添加的项目</li>
<li><code>heapq.merge（&lt;*iterables&gt;，key = None，reverse = False ）</code> 将多个已排序的输入合并为单个排序的输出</li>
<li><code>heapq.nlargest（n，iterable，key = None ）</code>  返回一个列表，其中包含iterable定义的数据集中的n个最大元素</li>
<li><code>heapq.nsmallest（n，iterable，key = None ）</code>  返回一个列表，其中包含iterable定义的数据集中的n个最小元素</li>
</ul>
<h5 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h5><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">heapsort</span><span class="params">(iterable)</span>:</span></span><br><span class="line"><span class="meta">... </span>    h = []</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">for</span> value <span class="keyword">in</span> iterable:</span><br><span class="line"><span class="meta">... </span>        heappush(h, value)</span><br><span class="line"><span class="meta">... </span>    <span class="keyword">return</span> [heappop(h) <span class="keyword">for</span> i <span class="keyword">in</span> range(len(h))]</span><br><span class="line">...</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heapsort([<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>, <span class="number">2</span>, <span class="number">4</span>, <span class="number">6</span>, <span class="number">8</span>, <span class="number">0</span>])</span><br><span class="line">[<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>堆元素可以是元组</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>h = []</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(h, (<span class="number">5</span>, <span class="string">'write code'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(h, (<span class="number">7</span>, <span class="string">'release product'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(h, (<span class="number">1</span>, <span class="string">'write spec'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heappush(h, (<span class="number">3</span>, <span class="string">'create tests'</span>))</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>heappop(h)</span><br><span class="line">(<span class="number">1</span>, <span class="string">'write spec'</span>)</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>双向队列</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis5手记</title>
    <url>/2019/11/04/Redis5%E6%89%8B%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h4><ol>
<li>新的<code>Stream</code>数据类型<ul>
<li>本质：抽象日志</li>
<li>时间数据流</li>
</ul>
</li>
<li>模块API：<code>Timers and Cluster API</code></li>
<li><code>RDB</code>现在存储<code>LFU</code>和<code>LRU</code>信息</li>
<li>集群管理器从<code>Ruby</code>移植到<code>C</code>代码</li>
<li><code>sorted set</code>命令：<code>ZPOPMIN</code>、<code>ZPOPMAX</code>和阻塞变种</li>
<li>主动碎片整理，<code>Jemalloc</code>:内存分配器</li>
<li>增强<code>HyperLogLog</code>实现</li>
<li>内存统计报告</li>
<li>子命令都有一个<code>help</code>子命令</li>
</ol>
<h4 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h4><ol>
<li>基本命令<ul>
<li><code>redis-server /etc/redis/redis.conf</code> 启动</li>
<li><code>redis-cli shutdown</code></li>
<li><code>flushall</code> 清空<code>redis</code></li>
<li><code>redis-cli -c -h &lt;IP&gt; -p &lt;Port&gt;</code> # <code>-c</code>以集群的方式连接</li>
<li><code>cluster info</code> 查看集群信息</li>
<li><code>cluster nodes</code> 查看集群节点</li>
<li><code>debug populate &lt;Number&gt; &lt;key&gt; &lt;value&gt;</code> 产生N条测试数据</li>
<li><code>info memory</code> 内存使用情况</li>
<li><code>memory usage &lt;key&gt;</code> 键值所占内存</li>
<li></li>
</ul>
</li>
</ol>
<h4 id="配置项redis-conf"><a href="#配置项redis-conf" class="headerlink" title="配置项redis.conf"></a>配置项<code>redis.conf</code></h4><ol>
<li><p>运行 </p>
<ul>
<li><code>daemonize no/yes</code> 后台守护进程</li>
<li><code>protected-mode no/yes</code> 增强安全</li>
<li><code>pidfile /var/run/redis_6379.pid</code> 以守护进程运行时的pid文件</li>
<li><code>logfile &quot;/log_path&quot;</code> 日志文件</li>
</ul>
</li>
<li><p><code>RDB</code> 持久化</p>
<ul>
<li><code>dbfilename dump.db</code> 、<code>dir ./</code>: <code>RDB</code>持久化的文件名称及存放位置</li>
</ul>
</li>
</ol>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">save 900 1 <span class="comment"># 900秒内1个key发生变化</span></span><br><span class="line">save 300 10 <span class="comment"># 300秒内10个key发生变化</span></span><br><span class="line">save 60 10000 <span class="comment"># 60秒内10000个key发生变化</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>AOF</code> 持久化（重启时优先读取）</li>
</ol>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">appendfsync always <span class="comment"># 只要key发生就会发持久化</span></span><br><span class="line">appendfsnc everysec <span class="comment"># 每秒持久化一次</span></span><br><span class="line">appendfsync no <span class="comment"># 不存储</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>oppendonly yes/no</code> </li>
<li><code>appendfilename &quot;appendonly.aof&quot;</code>、<code>dir ./</code></li>
</ul>
<ol start="4">
<li><code>cluster</code> 集群<ul>
<li><code>cluster-enabled yes/no</code> 集群开关</li>
<li><code>cluster-config-file nodes-6379.conf</code> 集群配置文件（系统自动维护，记录节点、状态、持久化参数等）</li>
<li><code>cluster-node-timeout 15000</code> 主节点试连的最大时间，如果超过此时间则副节点会自动升升级为主节点</li>
</ul>
</li>
</ol>
<h4 id="stream数据类型"><a href="#stream数据类型" class="headerlink" title="stream数据类型"></a><code>stream</code>数据类型</h4><ul>
<li>数据流向：从左向右，<code>消费组</code>进行读取</li>
<li>创建<code>stream</code></li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">XADD &lt;key&gt; &lt;ID&gt; field string[field string]</span><br></pre></td></tr></table></figure>
<ul>
<li>ID:毫秒的<code>unix</code>时间戳-<code>sequence</code>（同一毫秒的序列号）组成</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建demo</span></span><br><span class="line">XADD flag * key value <span class="comment">#ID默认时返回值为：时间戳+序列号（从0开始）</span></span><br><span class="line">XADD flag 0-1 key value <span class="comment">#ID自定义时返回值为自定义的ID</span></span><br></pre></td></tr></table></figure>

<ul>
<li>返回<code>stream</code>中元素的个数</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">XLEN &lt;key&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>删除一个ID</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">XDEL &lt;key&gt; ID</span><br></pre></td></tr></table></figure>

<ul>
<li>从一个或多个<code>stream</code>读取数据</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">XREAD [COUNT &lt;count&gt;] [BLOCK &lt;milliseconds&gt;] STREAMS &lt;key&gt; &lt;ID&gt; <span class="comment"># BLOCK 0 永远阻塞、&lt;key&gt; $ 获取最新的数据</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查看给定<code>ID</code>范围内的<code>stream</code>数据</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">XRNGE &lt;key&gt; &lt;start&gt; &lt;end&gt; [COUNT &lt;count&gt;] <span class="comment"># `+`最大ID、`-`最小ID</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>消费组</p>
<ul>
<li>创建消费组</li>
</ul>
</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">XGROUP CREATE &lt;key&gt; &lt;groupname&gt; &lt;ID&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>从消费组中读取数据</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">XREADGROUP GROUP &lt;groupname&gt; [COUNT &lt;count&gt;] [BLOCK &lt;milliseconds&gt;] STREAMS &lt;key&gt; &lt;ID&gt; <span class="comment"># ID为`&gt;`读取最新消息、&lt;ID&gt;之后的数据</span></span><br></pre></td></tr></table></figure>

<h4 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h4><h4 id="Sorted-Set命令"><a href="#Sorted-Set命令" class="headerlink" title="Sorted Set命令"></a><code>Sorted Set</code>命令</h4><ul>
<li><code>ZPOPMAX</code> 删除集合中分值最高的元素</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">ZPOPMAX &lt;key&gt; [count]</span><br></pre></td></tr></table></figure>

<ul>
<li><code>ZPOPMIN</code> 删除集合分值最低的元素</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">ZPOPMIN &lt;key&gt; [count]</span><br></pre></td></tr></table></figure>

<ul>
<li><code>BZPOPMAX</code> ZPOPMAX的阻塞版</li>
<li><code>BZPOPMIX</code> ZPOPMIN的阻塞版</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">BZPOPMAX &lt;key ...&gt; &lt;timeout&gt;</span><br></pre></td></tr></table></figure>

<h4 id="碎片整理和内存报告"><a href="#碎片整理和内存报告" class="headerlink" title="碎片整理和内存报告"></a>碎片整理和内存报告</h4><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /etc/redis/redis.conf</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>activedefrag yes|no</code> 启动碎片整理程序</li>
<li><code>active-defrg-ignore-bytes 100mb</code> 当内存小于100m时可以忽略</li>
<li><code>active-defrg-threshold-lower 10</code> 当内存占比小于10%时可暂时忽略</li>
<li><code>info memory</code> 查看内存使用情况</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">&gt; info memory</span><br><span class="line"></span><br><span class="line">used_memory_human:?m <span class="comment">#实际内存占用</span></span><br><span class="line">used_memory_rss_human:?m <span class="comment">#系统分配内存</span></span><br><span class="line">mem_fragmentation_ratio: ? <span class="comment">#内存使用率</span></span><br></pre></td></tr></table></figure>

<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">&gt; MEMORY STATS</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyenv Python installation steps to get the latest tcl/tk version on Mac OS 10.14.6 (Mojave)</title>
    <url>/2019/11/04/Pyenv-Python-installation-steps-to-get-the-latest-tcl-tk-version-on-Mac-OS-10-14-6-Mojave/</url>
    <content><![CDATA[<ol>
<li>install pyenv via homebrew</li>
</ol>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ brew install pyenv</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>install tcl-tk via home brew</li>
</ol>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ brew install tcl-tk</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> LDFLAGS=<span class="string">"-L/usr/local/opt/tcl-tk/lib"</span></span><br><span class="line"><span class="built_in">export</span> CPPFLAGS=<span class="string">"-I/usr/local/opt/tcl-tk/include"</span></span><br><span class="line"><span class="built_in">export</span> PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/opt/tcl-tk/bin</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>to get tcl-tk 8.6 to work with the pyenv install of python, you must edit the python-build script file. </li>
</ol>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ vi ~/.pyenv/plugins/python-build/bin/python-build</span><br></pre></td></tr></table></figure>

<p>Once you have the script file open, search for:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$CONFIGURE_OPTS</span> <span class="string">$&#123;!PACKAGE_CONFIGURE_OPTS&#125;</span> <span class="string">"$&#123;!PACKAGE_CONFIGURE_OPTS_ARRAY&#125;"</span> <span class="string">||</span> <span class="string">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>and replace with:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$CONFIGURE_OPTS</span> <span class="string">--with-tcltk-includes='-I/usr/local/opt/tcl-tk/include'</span> <span class="string">--with-tcltk-libs='-L/usr/local/opt/tcl-tk/lib</span> <span class="string">-ltcl8.6</span> <span class="string">-ltk8.6'</span> <span class="string">$&#123;!PACKAGE_CONFIGURE_OPTS&#125;</span> <span class="string">"$&#123;!PACKAGE_CONFIGURE_OPTS_ARRAY&#125;"</span> <span class="string">||</span> <span class="string">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>install Python 3.8.0 in pyenv</li>
</ol>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$pyenv</span> install 3.8.0</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>Test your tcl-tk installation with</li>
</ol>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$python</span> -m tkinter -c <span class="string">'tkinter._test()'</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>pyenv</tag>
        <tag>tcl/tk</tag>
        <tag>python</tag>
      </tags>
  </entry>
</search>
