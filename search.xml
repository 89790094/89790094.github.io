<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Redis5手记</title>
    <url>/2019/11/04/Redis5%E6%89%8B%E8%AE%B0/</url>
    <content><![CDATA[<h4 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h4><ol>
<li>新的<code>Stream</code>数据类型<ul>
<li>本质：抽象日志</li>
<li>时间数据流</li>
</ul>
</li>
<li>模块API：<code>Timers and Cluster API</code></li>
<li><code>RDB</code>现在存储<code>LFU</code>和<code>LRU</code>信息</li>
<li>集群管理器从<code>Ruby</code>移植到<code>C</code>代码</li>
<li><code>sorted set</code>命令：<code>ZPOPMIN</code>、<code>ZPOPMAX</code>和阻塞变种</li>
<li>主动碎片整理，<code>Jemalloc</code>:内存分配器</li>
<li>增强<code>HyperLogLog</code>实现</li>
<li>内存统计报告</li>
<li>子命令都有一个<code>help</code>子命令</li>
</ol>
<h4 id="命令行"><a href="#命令行" class="headerlink" title="命令行"></a>命令行</h4><ol>
<li>基本命令<ul>
<li><code>redis-server /etc/redis/redis.conf</code> 启动</li>
<li><code>redis-cli shutdown</code></li>
<li><code>flushall</code> 清空<code>redis</code></li>
<li><code>redis-cli -c -h &lt;IP&gt; -p &lt;Port&gt;</code> # <code>-c</code>以集群的方式连接</li>
<li><code>cluster info</code> 查看集群信息</li>
<li><code>cluster nodes</code> 查看集群节点</li>
<li><code>debug populate &lt;Number&gt; &lt;key&gt; &lt;value&gt;</code> 产生N条测试数据</li>
<li><code>info memory</code> 内存使用情况</li>
<li><code>memory usage &lt;key&gt;</code> 键值所占内存</li>
<li></li>
</ul>
</li>
</ol>
<h4 id="配置项redis-conf"><a href="#配置项redis-conf" class="headerlink" title="配置项redis.conf"></a>配置项<code>redis.conf</code></h4><ol>
<li><p>运行 </p>
<ul>
<li><code>daemonize no/yes</code> 后台守护进程</li>
<li><code>protected-mode no/yes</code> 增强安全</li>
<li><code>pidfile /var/run/redis_6379.pid</code> 以守护进程运行时的pid文件</li>
<li><code>logfile &quot;/log_path&quot;</code> 日志文件</li>
</ul>
</li>
<li><p><code>RDB</code> 持久化</p>
<ul>
<li><code>dbfilename dump.db</code> 、<code>dir ./</code>: <code>RDB</code>持久化的文件名称及存放位置</li>
</ul>
</li>
</ol>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">save 900 1 <span class="comment"># 900秒内1个key发生变化</span></span><br><span class="line">save 300 10 <span class="comment"># 300秒内10个key发生变化</span></span><br><span class="line">save 60 10000 <span class="comment"># 60秒内10000个key发生变化</span></span><br></pre></td></tr></table></figure>

<ol start="3">
<li><code>AOF</code> 持久化（重启时优先读取）</li>
</ol>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">appendfsync always <span class="comment"># 只要key发生就会发持久化</span></span><br><span class="line">appendfsnc everysec <span class="comment"># 每秒持久化一次</span></span><br><span class="line">appendfsync no <span class="comment"># 不存储</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>oppendonly yes/no</code> </li>
<li><code>appendfilename &quot;appendonly.aof&quot;</code>、<code>dir ./</code></li>
</ul>
<ol start="4">
<li><code>cluster</code> 集群<ul>
<li><code>cluster-enabled yes/no</code> 集群开关</li>
<li><code>cluster-config-file nodes-6379.conf</code> 集群配置文件（系统自动维护，记录节点、状态、持久化参数等）</li>
<li><code>cluster-node-timeout 15000</code> 主节点试连的最大时间，如果超过此时间则副节点会自动升升级为主节点</li>
</ul>
</li>
</ol>
<h4 id="stream数据类型"><a href="#stream数据类型" class="headerlink" title="stream数据类型"></a><code>stream</code>数据类型</h4><ul>
<li>数据流向：从左向右，<code>消费组</code>进行读取</li>
<li>创建<code>stream</code></li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">XADD &lt;key&gt; &lt;ID&gt; field string[field string]</span><br></pre></td></tr></table></figure>
<ul>
<li>ID:毫秒的<code>unix</code>时间戳-<code>sequence</code>（同一毫秒的序列号）组成</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建demo</span></span><br><span class="line">XADD flag * key value <span class="comment">#ID默认时返回值为：时间戳+序列号（从0开始）</span></span><br><span class="line">XADD flag 0-1 key value <span class="comment">#ID自定义时返回值为自定义的ID</span></span><br></pre></td></tr></table></figure>

<ul>
<li>返回<code>stream</code>中元素的个数</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">XLEN &lt;key&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>删除一个ID</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">XDEL &lt;key&gt; ID</span><br></pre></td></tr></table></figure>

<ul>
<li>从一个或多个<code>stream</code>读取数据</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">XREAD [COUNT &lt;count&gt;] [BLOCK &lt;milliseconds&gt;] STREAMS &lt;key&gt; &lt;ID&gt; <span class="comment"># BLOCK 0 永远阻塞、&lt;key&gt; $ 获取最新的数据</span></span><br></pre></td></tr></table></figure>

<ul>
<li>查看给定<code>ID</code>范围内的<code>stream</code>数据</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">XRNGE &lt;key&gt; &lt;start&gt; &lt;end&gt; [COUNT &lt;count&gt;] <span class="comment"># `+`最大ID、`-`最小ID</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>消费组</p>
<ul>
<li>创建消费组</li>
</ul>
</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">XGROUP CREATE &lt;key&gt; &lt;groupname&gt; &lt;ID&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>从消费组中读取数据</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">XREADGROUP GROUP &lt;groupname&gt; [COUNT &lt;count&gt;] [BLOCK &lt;milliseconds&gt;] STREAMS &lt;key&gt; &lt;ID&gt; <span class="comment"># ID为`&gt;`读取最新消息、&lt;ID&gt;之后的数据</span></span><br></pre></td></tr></table></figure>

<h4 id="搭建集群"><a href="#搭建集群" class="headerlink" title="搭建集群"></a>搭建集群</h4><h4 id="Sorted-Set命令"><a href="#Sorted-Set命令" class="headerlink" title="Sorted Set命令"></a><code>Sorted Set</code>命令</h4><ul>
<li><code>ZPOPMAX</code> 删除集合中分值最高的元素</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">ZPOPMAX &lt;key&gt; [count]</span><br></pre></td></tr></table></figure>

<ul>
<li><code>ZPOPMIN</code> 删除集合分值最低的元素</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">ZPOPMIN &lt;key&gt; [count]</span><br></pre></td></tr></table></figure>

<ul>
<li><code>BZPOPMAX</code> ZPOPMAX的阻塞版</li>
<li><code>BZPOPMIX</code> ZPOPMIN的阻塞版</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">BZPOPMAX &lt;key ...&gt; &lt;timeout&gt;</span><br></pre></td></tr></table></figure>

<h4 id="碎片整理和内存报告"><a href="#碎片整理和内存报告" class="headerlink" title="碎片整理和内存报告"></a>碎片整理和内存报告</h4><figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="comment"># vi /etc/redis/redis.conf</span></span><br></pre></td></tr></table></figure>

<ul>
<li><code>activedefrag yes|no</code> 启动碎片整理程序</li>
<li><code>active-defrg-ignore-bytes 100mb</code> 当内存小于100m时可以忽略</li>
<li><code>active-defrg-threshold-lower 10</code> 当内存占比小于10%时可暂时忽略</li>
<li><code>info memory</code> 查看内存使用情况</li>
</ul>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">&gt; info memory</span><br><span class="line"></span><br><span class="line">used_memory_human:?m <span class="comment">#实际内存占用</span></span><br><span class="line">used_memory_rss_human:?m <span class="comment">#系统分配内存</span></span><br><span class="line">mem_fragmentation_ratio: ? <span class="comment">#内存使用率</span></span><br></pre></td></tr></table></figure>

<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">&gt; MEMORY STATS</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>redis</category>
      </categories>
      <tags>
        <tag>redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Pyenv Python installation steps to get the latest tcl/tk version on Mac OS 10.14.6 (Mojave)</title>
    <url>/2019/11/04/Pyenv-Python-installation-steps-to-get-the-latest-tcl-tk-version-on-Mac-OS-10-14-6-Mojave/</url>
    <content><![CDATA[<ol>
<li>install pyenv via homebrew</li>
</ol>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ brew install pyenv</span><br></pre></td></tr></table></figure>

<ol start="2">
<li>install tcl-tk via home brew</li>
</ol>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ brew install tcl-tk</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>to get tcl-tk 8.6 to work with the pyenv install of python, you must edit the python-build script file. </li>
</ol>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line">$ vi ~/.pyenv/plugins/python-build/bin/python-build</span><br></pre></td></tr></table></figure>

<p>Once you have the script file open, search for:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$CONFIGURE_OPTS</span> <span class="string">$&#123;!PACKAGE_CONFIGURE_OPTS&#125;</span> <span class="string">"$&#123;!PACKAGE_CONFIGURE_OPTS_ARRAY&#125;"</span> <span class="string">||</span> <span class="string">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>and replace with:</p>
<figure class="highlight yaml"><table><tr><td class="code"><pre><span class="line"><span class="string">$CONFIGURE_OPTS</span> <span class="string">--with-tcltk-includes='-I/usr/local/opt/tcl-tk/include'</span> <span class="string">--with-tcltk-libs='-L/usr/local/opt/tcl-tk/lib</span> <span class="string">-ltcl8.6</span> <span class="string">-ltk8.6'</span> <span class="string">$&#123;!PACKAGE_CONFIGURE_OPTS&#125;</span> <span class="string">"$&#123;!PACKAGE_CONFIGURE_OPTS_ARRAY&#125;"</span> <span class="string">||</span> <span class="string">return</span> <span class="number">1</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>install Python 3.8.0 in pyenv</li>
</ol>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$pyenv</span> install 3.8.0</span><br></pre></td></tr></table></figure>

<ol start="5">
<li>Test your tcl-tk installation with</li>
</ol>
<figure class="highlight zsh"><table><tr><td class="code"><pre><span class="line"><span class="variable">$python</span> -m tkinter -c <span class="string">'tkinter._test()'</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>pyenv</tag>
        <tag>tcl/tk</tag>
        <tag>python</tag>
      </tags>
  </entry>
</search>
